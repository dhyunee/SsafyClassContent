package boj;

import java.io.BufferedReader;
import java.io.InputStreamReader;

//dfs 1개+map 변경
public class boj_10026_2 {

	static int n,cnt,cnt2;
	static char [][]map;
	static boolean [][]visited;
	static int[] dx= {0,0,1,-1},dy= {-1,1,0,0};
	public static void main(String[] args) throws Exception{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		n=Integer.parseInt(br.readLine());
		map=new char[n][];
		for(int i=0;i<n;i++) {
			map[i]=br.readLine().toCharArray();
		}
		
		visited=new boolean[n][n];
		
		//적록색약이 아닌 경우
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				if(!visited[i][j]) {
					dfs(i,j);
					cnt++;
				}
			}
		}
		//적록 색약
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				if(map[i][j]=='R')map[i][j]='G';
			}
		}
		visited=new boolean[n][n];
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				if(!visited[i][j]) {
					dfs(i,j);
					cnt2++;
				}
			}
		}
		
		System.out.println(cnt+" "+cnt2);
	}
	
	static void dfs(int y,int x) {
		visited[y][x]=true;
		for(int i=0;i<4;i++) {
			int ny=y+dy[i];
			int nx=x+dx[i];
			if(ny>=n||nx>=n||nx<0||ny<0||visited[ny][nx]||map[ny][nx]!=map[y][x])continue;
			dfs(ny,nx);
		}
	}
	
}
