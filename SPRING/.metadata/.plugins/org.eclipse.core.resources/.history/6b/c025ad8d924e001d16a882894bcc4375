package com.mycom.myapp.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

//spring에서 내부적으로 관리되어야 하는 컴포넌트
@Component
//sop를 처리하는 특별한 컴포넌트
@Aspect
public class LogAspect {
	private final Logger logger=LoggerFactory.getLogger(this.getClass());
	
	//BusinessProcess의 method 에 끼어들려고 한다(Aspect)
	//Pointcut으로 끼어들 method를 선택
	//Pointcut 은 method signature를 이용
	@Pointcut(value="execution( * com.mycom.myapp.aspect.*.*(..))")//return type - package - class - method(parameter)
	private void logPointCut() {}//어느 클래스의 어느 메소드에 끼어드는지 표현
	
	//Advise 이용해서 앞,뒤 등 메소드 호출별 시점을 지정
	@Before("logPointCut()")
	public void beforeLog(JoinPoint joinPoint) {//joinPoint 끼어드는 메소드의 연결 정보
		Signature signature=joinPoint.getSignature();
		System.out.println("[sysout : Before] 메소드 이름 : "+signature.getName());//단순 출력(항상 출력)
		logger.debug("Logger : Before] 메소드 이름 : "+signature.getName());//메세지를 logger를 통해서 debug level로 출력
	}
	@After("logPointCut()")
	public void afterLog(JoinPoint joinPoint) {//joinPoint 끼어드는 메소드의 연결 정보
		Signature signature=joinPoint.getSignature();
		System.out.println("[sysout : After] 메소드 이름 : "+signature.getName());//단순 출력(항상 출력)
		logger.debug("Logger : After] 메소드 이름 : "+signature.getName());//메세지를 logger를 통해서 debug level로 출력
	}
}	
